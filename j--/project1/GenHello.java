import java.util.ArrayList;

import jminusminus.CLEmitter;

import static jminusminus.CLConstants.*;

/**
 * This class programmatically generates the class file for the following Java application:
 *
 * <pre>
 * public class Hello {
 *     // Entry point.
 *     public static void main(String[] args) {
 *         System.out.println("Hello, World!");
 *     }
 * }
 * </pre>
 */
public class GenHello {
    public static void main(String[] args) {
        CLEmitter e = new CLEmitter(true);

        // list to contain access modifiers
        ArrayList<String> modifiers = new ArrayList<String>();

        // public class Hello { ----------------------------------------------------------------------------------------
        // Step 1. .addClass() needs access flags for the class we want to load, so add public
        modifiers.add("public");

        // Step 2. .addClass() needs the name of the class we want to load, any superclasses
        //          since all classes derive from Object class, we set that as a superclass,
        //          any superinterfaces, in this case none, and if our class is synthetic.
        //          Synthetic means; is it a method generated by the compiler?

        e.addClass(modifiers,"Hello","java/lang/Object",null,true);


        // public static void main(String[] args) { --------------------------------------------------------------------

        // Step 1. Now we want to add a method, so we can get rid of the access modifiers
        modifiers.clear();

        // Step 2. Add access modifiers for the main function. This includes; public static
        modifiers.add("public");
        modifiers.add("static");

        // Step 3. Add necessary argument types and return type of the method.

        // String inside () represent types for the arguments. Letter after the last ')' represents method return
        // type.
        // [ - represents an array
        // L - represents an object type. String is part of the java standard lib so L needs class name in
        //     internal form.
        // ; - end of object type (L)
        // V - void return type of main
        String descriptor = "([Ljava/lang/String;)V";
        e.addMethod(modifiers, "main", descriptor,null, true);


        // System.out.println("Hello, World!) --------------------------------------------------------------------------

        // System.out
        e.addMemberAccessInstruction(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");

        // sb = new StringBuilder()
        // Add new instantiation of StringBuilder to stack
        e.addReferenceInstruction(NEW, "java/lang/StringBuffer");
        e.addNoArgInstruction(DUP);
        e.addMemberAccessInstruction(INVOKESPECIAL, "java/lang/StringBuffer", "<init>", "()V");

        // sb.append("Hello, World!)
        e.addLDCInstruction("Hello, World!");
        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/lang/StringBuffer", "append",
                "(Ljava/lang/String;)Ljava/lang/StringBuffer;");

        // System.out.println(sb.toString());
        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/lang/StringBuffer",
                "toString", "()Ljava/lang/String;");
        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/io/PrintStream", "println",
                "(Ljava/lang/String;)V");

        // return;
        e.addNoArgInstruction(RETURN);


        //        // ******************************************************
//        e.addMemberAccessInstruction(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
//        e.addReferenceInstruction(NEW, "java/lang/StringBuffer");
//        e.addNoArgInstruction(DUP);
//        e.addMemberAccessInstruction(INVOKESPECIAL, "java/lang/StringBuffer", "<init>", "()V");
//        e.addLDCInstruction("Hello, World!");
//        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/lang/StringBuffer", "append",
//                "(Ljava/lang/String;)Ljava/lang/StringBuffer;");
//        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/lang/StringBuffer",
//                "toString", "()Ljava/lang/String;");
//        e.addMemberAccessInstruction(INVOKEVIRTUAL, "java/io/PrintStream", "println",
//                "(Ljava/lang/String;)V");
//        e.addNoArgInstruction(ICONST_0);
//        e.addNoArgInstruction(IRETURN);
//        // ******************************************************

        e.write();
    }
}
